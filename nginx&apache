https://www.cnblogs.com/yum777/p/6244909.html
http://www.chinaz.com/program/2015/0424/401376.shtml
  阻塞是由于进程所需资源得不到满足，并会最终导致进程被挂起
  进程挂起的原因并不一定是由于阻塞，也有可能是时间片得不到满足，挂起状态是进程从内存调度到外存中的一种状态，若在就绪态时，从内存调出到外存中，就是就绪挂起态，若在阻塞态时，从内存调出到外存中，就转换成了阻塞挂起态

 同步异步、阻塞非阻塞：
 老张爱喝茶，废话不说，煮开水。出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。1 老张把水壶放到火上，立等水开。（同步阻塞）老张觉得自己有点傻2 老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞）老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出嘀~~~~的噪音。3 老张把响水壶放到火上，立等水开。（异步阻塞）老张觉得这样傻等意义不大4 老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞）老张觉得自己聪明了。所谓同步异步，只是对于水壶而言。普通水壶，同步；响水壶，异步。虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。所谓阻塞非阻塞，仅仅对于老张而言。立等的老张，阻塞；看电视的老张，非阻塞。情况1和情况3中老张就是阻塞的，媳妇喊他都不知道。虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。


  select/poll 和epoll都解决了读写数据时的阻塞读，不过select/poll其实只是将阻塞点移到自己身上,select/poll阻塞的检测多个i/o套接字（使用低效的轮询），发现
  可读写的就返回，注意次数返回的套接字必然是可以直接读写没有阻塞的了，epoll做的事情是一样，不过他使用事件机制，本身不会引起阻塞，不用去轮询。
  
  这里的等待套接字准备好即有数据可读，其实就是数据从存储设备传输到内核缓冲器中，后面的i/o读就是将内核缓冲区的数据拷贝到用户应用空间
  
  select/poll属于i/o模型中i/o复用，即一次课检测多个套接字，epoll其实也属于该类型，只是有了第四种模型：信号驱动的一部分机制，对于高i/o应用性能更加
  
  
  
  apache工作模式：http://blog.csdn.net/STFPHP/article/details/52954303

  那么我的理解是nginx的epoll模式是部分异步非阻塞，这只针对epoll这个机制这个函数，但是处理请求整个过程是同步阻塞的，阻塞是说通过i/o套接字读数据是阻塞的，同步时因为需要等待数据读完才返回
